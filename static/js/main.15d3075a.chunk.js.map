{"version":3,"sources":["App.js","keypad.js","results.js","serviceWorker.js","index.js"],"names":["App","onClick","button","calculate","startFresh","reset","setState","result","state","length","slice","match","eval","e","className","this","Component","KeypadButtons","variant","name","props","target","ResultComponent","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.15d3075a.chunk.js","sourcesContent":["\nimport React, { Component } from 'react';\nimport './App.css';\nimport KeypadButtons from \"./keypad\";\nimport ResultComponent from './results';\n\n\nclass App extends Component {\n    constructor(){\n        super();\n\n        this.state = {\n            result: \"\"\n        }\n\n        this.startFresh = false;\n    }\n\n    onClick = button => {\n\n        //If equals\n        if(button === \"=\"){\n            this.calculate()\n\n            //Trigger calculator to start from fresh on next button\n            this.startFresh = true;\n        }\n\n        //If clear button or set to be started from fresh\n        else if(button === \"C\" || this.startFresh === true){\n            this.reset()\n            \n            //If Fresh is set, re-apply the pressed button\n            if(this.startFresh === true){\n                this.setState({\n                    result: button\n                })\n\n                this.startFresh = false;    //set back to false\n            }\n        }\n        \n        //Any other buttons\n        else {\n\n            //View new result\n            var result = this.state.result + button;\n\n            \n            //If more than two characters, check if the last two characters are both either: - + * /\n            if ( result.length > 2 ) {\n                const regEx = /^[-+*\\/]{2}/\n\n                //If there both two characters are operators, remove the last one\n                if (result.slice(-2).match(regEx)) {\n                    var result = result.slice(0, -1);\n                }\n            }\n            \n\n            //Set the state\n            this.setState({\n                result: result\n            })\n        }\n    };\n\n\n    calculate = () => {\n        try {\n            this.setState({\n                result: (eval(this.state.result) || \"\" ) + \"\"\n            })\n        } catch (e) {\n            this.setState({\n                result: \"ERROR: Cannot perform this calculation\"\n            })\n\n        }\n    };\n\n    reset = () => {\n        this.setState({\n            result: \"\"\n        })\n    };\n\n\n    render() {\n        return (\n            <div>\n                <div className=\"calculator-body\">\n                    <h1>Simple Calculator</h1>\n                    <ResultComponent result={this.state.result}/>\n                    <KeypadButtons onClick={this.onClick}/>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;","\nimport React, {Component} from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Button from 'react-bootstrap/Button';\n\nclass KeypadButtons extends Component {\n\n    render() {\n        return (\n            <div className=\"button\">\n\n                <Button variant=\"outline-primary\" name=\"1\" onClick={e => this.props.onClick(e.target.name)}>1</Button>\n                <Button variant=\"outline-primary\" name=\"2\" onClick={e => this.props.onClick(e.target.name)}>2</Button>\n                <Button variant=\"outline-primary\" name=\"3\" onClick={e => this.props.onClick(e.target.name)}>3</Button>\n                <Button variant=\"outline-info\" name=\"+\" onClick={e => this.props.onClick(e.target.name)}>+</Button><br/>\n\n                <Button variant=\"outline-primary\" name=\"4\" onClick={e => this.props.onClick(e.target.name)}>4</Button>\n                <Button variant=\"outline-primary\" name=\"5\" onClick={e => this.props.onClick(e.target.name)}>5</Button>\n                <Button variant=\"outline-primary\" name=\"6\" onClick={e => this.props.onClick(e.target.name)}>6</Button>\n                <Button variant=\"outline-info\" name=\"-\" onClick={e => this.props.onClick(e.target.name)}>-</Button><br/>\n\n                <Button variant=\"outline-primary\" name=\"7\" onClick={e => this.props.onClick(e.target.name)}>7</Button>\n                <Button variant=\"outline-primary\" name=\"8\" onClick={e => this.props.onClick(e.target.name)}>8</Button>\n                <Button variant=\"outline-primary\" name=\"9\" onClick={e => this.props.onClick(e.target.name)}>9</Button>\n                <Button variant=\"outline-info\" name=\"*\" onClick={e => this.props.onClick(e.target.name)}>x</Button><br/>\n\n                <Button variant=\"outline-primary\" name=\"0\" onClick={e => this.props.onClick(e.target.name)}>0</Button>\n                <Button variant=\"outline-info\" name=\".\" onClick={e => this.props.onClick(e.target.name)}>.</Button>\n                <Button variant=\"outline-info\" name=\"%\" onClick={e => this.props.onClick(e.target.name)}>%</Button>\n                <Button variant=\"outline-info\" name=\"/\" onClick={e => this.props.onClick(e.target.name)}>รท</Button><br/>\n\n                <Button variant=\"success\" name=\"=\" onClick={e => this.props.onClick(e.target.name)}>=</Button>\n                <Button variant=\"danger\" name=\"C\" onClick={e => this.props.onClick(e.target.name)}>C</Button>\n            </div>\n        );\n    }\n}\n\n\nexport default KeypadButtons;","\nimport React, {Component} from 'react';\n\nclass ResultComponent extends Component {\n\n\n    render() {\n        let {result} = this.props;\n        return (\n            <div className=\"result\">\n                <p>{result}</p>\n            </div>\n    )\n        ;\n    }\n}\n\n\nexport default ResultComponent;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}